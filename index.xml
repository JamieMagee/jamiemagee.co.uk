<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jamie Magee</title><link>/</link><description>Recent content on Jamie Magee</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Thu, 17 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding .NET Base Class Library Vulnerabilities</title><link>/blog/understanding-dotnet-base-class-library-vulnerabilities/</link><pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate><guid>/blog/understanding-dotnet-base-class-library-vulnerabilities/</guid><description>&lt;p&gt;When you create a new .NET project and start writing code, you might find yourself using classes like &lt;code&gt;System.Text.Json.JsonSerializer&lt;/code&gt; without ever explicitly adding a reference to &lt;code&gt;System.Text.Json&lt;/code&gt; in your &lt;code&gt;.csproj&lt;/code&gt; file. This isn&amp;rsquo;t magic—it&amp;rsquo;s because these Base Class Libraries (BCLs) are shipped as part of the .NET runtime itself, making them implicit references that are automatically available to your application.&lt;/p&gt;
&lt;p&gt;But this convenience comes with a hidden security implication that many developers don&amp;rsquo;t realize: when a vulnerability is discovered in one of these implicit dependencies, patching it isn&amp;rsquo;t as straightforward as updating a NuGet package reference.&lt;/p&gt;</description></item><item><title>Honey, I shrunk the npm package</title><link>/blog/honey-i-shrunk-the-npm-package/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>/blog/honey-i-shrunk-the-npm-package/</guid><description>&lt;p&gt;Have you ever wondered what lies beneath the surface of an npm package? At its heart, it’s nothing more than a gzipped tarball. Working in software development, source code and binary artifacts are nearly always shipped as &lt;code&gt;.tar.gz&lt;/code&gt; or &lt;code&gt;.tgz&lt;/code&gt; files. And gzip compression is supported by every HTTP server and web browser out there. &lt;a href="http://caniuse.com"&gt;caniuse.com&lt;/a&gt; doesn’t even give statistics for support, it just says “&lt;a href="https://caniuse.com/sr_content-encoding-gzip"&gt;supported in effectively all browsers&lt;/a&gt;”. But here&amp;rsquo;s the kicker: gzip is starting to show its age, making way for newer, more modern compression algorithms like Brotli and ZStandard. Now, imagine a world where npm embraces one of these new algorithms. In this blog post, I&amp;rsquo;ll dive into the realm of compression and explore the possibilities of modernising npm&amp;rsquo;s compression strategy.&lt;/p&gt;</description></item><item><title>Container Plumbing Days 2023—Windows containers: The forgotten stepchild</title><link>/blog/container-plumbing-days-2023-windows-containers/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>/blog/container-plumbing-days-2023-windows-containers/</guid><description>&lt;p&gt;When it comes to Linux containers, there are plenty of tools out there that can scan container images, generate Software Bill of Materials (SBOM), or list vulnerabilities. However, Windows container images are more like the forgotten stepchild in the container ecosystem. And that means we’re forgetting the countless developers using Windows containers, too.&lt;/p&gt;
&lt;p&gt;Instead of allowing this gap to widen further, container tool authors—especially SBOM tools and vulnerability scanners—need to add support for Windows container images.&lt;/p&gt;</description></item><item><title>Your Jest tests might be wrong</title><link>/blog/your-jest-tests-might-be-wrong/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>/blog/your-jest-tests-might-be-wrong/</guid><description>&lt;p&gt;Is your Jest test suite failing you? You might not be using the testing framework&amp;rsquo;s full potential, especially when it comes to preventing state leakage between tests. The Jest settings &lt;a href="https://jestjs.io/docs/configuration#clearmocks-boolean"&gt;&lt;code&gt;clearMocks&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://jestjs.io/docs/configuration#resetmocks-boolean"&gt;&lt;code&gt;resetMocks&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://jestjs.io/docs/configuration#restoremocks-boolean"&gt;&lt;code&gt;restoreMocks&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://jestjs.io/docs/configuration#resetmodules-boolean"&gt;&lt;code&gt;resetModules&lt;/code&gt;&lt;/a&gt; are set to &lt;code&gt;false&lt;/code&gt; by default. If you haven’t changed these defaults, your tests might be fragile, order-dependent, or just downright wrong. In this blog post, I’ll dig into what each setting does, and how you can fix your tests.&lt;/p&gt;</description></item><item><title>Maintaining AUR packages with Renovate</title><link>/blog/maintaining-aur-packages-with-renovate/</link><pubDate>Thu, 16 Mar 2023 00:00:00 +0000</pubDate><guid>/blog/maintaining-aur-packages-with-renovate/</guid><description>&lt;p&gt;One big advantage that Arch Linux has over other distributions, apart from being able to say “BTW I use Arch.”, is the Arch User Repository (AUR). It’s a community-driven repository with over 80,000 packages. If you’re looking for a package, chances are you&amp;rsquo;ll find it in the AUR.&lt;/p&gt;
&lt;p&gt;Keeping all those packages up to date, takes a lot of manual effort by a lot of volunteers. People have created and used tools, like &lt;a href="https://github.com/thp/urlwatch"&gt;&lt;code&gt;urlwatch&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/eli-schwartz/aurpublish"&gt;&lt;code&gt;aurpublish&lt;/code&gt;&lt;/a&gt;, to let them know when upstream releases are cut and automate some parts of the process. I know I do. But I wanted to automate the entire process. I think &lt;a href="https://github.com/renovatebot/renovate/"&gt;Renovate&lt;/a&gt; can help here.&lt;/p&gt;</description></item><item><title>Scanning Windows container images is (surprisingly) easy!</title><link>/blog/scanning-windows-container-images-is-surprisingly-easy/</link><pubDate>Mon, 02 Jan 2023 00:00:00 +0000</pubDate><guid>/blog/scanning-windows-container-images-is-surprisingly-easy/</guid><description>&lt;p&gt;When it comes to Linux containers, there are plenty of tools out there that can scan container images, generate Software Bill of Materials (SBOM), or list vulnerabilities. However, Windows container images are more like the forgotten stepchild in the container ecosystem. And that means we’re forgetting the countless developers using Windows containers, too.&lt;/p&gt;
&lt;p&gt;I wanted to see what I’d need to make scanning tools for Windows container images. Turns out it’s pretty easy. So easy, in fact, I think the existing container tools should add support for Windows container images.&lt;/p&gt;</description></item><item><title>Making the most of GitHub rate limits</title><link>/blog/making-the-most-of-github-rate-limits/</link><pubDate>Tue, 26 Jul 2022 08:19:08 +0000</pubDate><guid>/blog/making-the-most-of-github-rate-limits/</guid><description>&lt;p&gt;The GitHub documentation has a lot of good advice about rate limits for its API, and how to make the most of them. However, since using the GitHub API, there are some things I’ve discovered that the documentation doesn’t cover, or doesn’t cover so well.&lt;/p&gt;
&lt;h2 id="conditional-requests"&gt;Conditional requests&lt;/h2&gt;
&lt;p&gt;This topic is actually covered very well in &lt;a href="https://docs.github.com/en/rest/overview/resources-in-the-rest-api#conditional-requests"&gt;the GitHub documentation&lt;/a&gt;. To summarise, all REST API requests will return &lt;code&gt;ETag&lt;/code&gt; headers, and most will return &lt;code&gt;Last-Modified&lt;/code&gt;. You can make use of these by making subsequent requests with the &lt;code&gt;If-None-Match&lt;/code&gt; and &lt;code&gt;If-Modified-Since&lt;/code&gt; headers respectively. If the resource hasn’t been modified, you’ll get back a &lt;code&gt;304 Not Modified&lt;/code&gt; response, and the request won&amp;rsquo;t count against your rate limit.&lt;/p&gt;</description></item><item><title>Writing GitHub bots in .NET</title><link>/blog/writing-github-bots-in-net/</link><pubDate>Fri, 04 Mar 2022 05:40:46 +0000</pubDate><guid>/blog/writing-github-bots-in-net/</guid><description>&lt;p&gt;For a while now the Octokit libraries for .NET have lagged behind the JavaScript libraries, especially when it comes to webhooks. Unfortunately, I needed a GitHub webhook client for an internal project, so I had to write my own. It wasn’t too much extra effort to open source it, and thus &lt;a href="https://github.com/octokit/webhooks.net"&gt;Octokit.Webhooks&lt;/a&gt; was born!&lt;/p&gt;
&lt;p&gt;I wanted to give a quick example of how to get up and running with &lt;code&gt;Octokit.Webhooks&lt;/code&gt;, and what better way than to write a small GitHub bot?&lt;/p&gt;</description></item><item><title>Netlify billing Denial-of-Service</title><link>/blog/netlify-billing-denial-of-service/</link><pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/netlify-billing-denial-of-service/</guid><description>&lt;p&gt;At its heart, &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; is a platform for hosting static websites. I initially started using it as an alternative to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;, and features like &lt;a href="https://www.netlifycms.org/"&gt;Netlify CMS&lt;/a&gt; and &lt;a href="https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/"&gt;preview deploys&lt;/a&gt; really won me over. However, I recently got bit by preview deploys and the build minutes pricing.&lt;/p&gt;
&lt;p&gt;I had a few GitHub repos set up to automatically deploy to Netlify previews from pull requests. I had also configured &lt;a href="https://renovate.whitesourcesoftware.com/"&gt;Renovate&lt;/a&gt; to automatically open pull requests for my dependencies. Javascript projects have a lot of dependencies, so there were more than a few pull requests!&lt;/p&gt;</description></item><item><title>Tech stack #10YearChallenge</title><link>/blog/tech-stack-10-year-challenge/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>/blog/tech-stack-10-year-challenge/</guid><description>&lt;p&gt;&lt;a href="https://twitter.com/search?q=%2310yearchallenge"&gt;#10YearChallenge&lt;/a&gt; has been trending for a while, so I thought it would be fun to do a 10 year challenge for programming and take a look at the technology I used back in 2010.&lt;/p&gt;
&lt;h2 id="2010"&gt;2010&lt;/h2&gt;
&lt;p&gt;10 years ago covers my final year in high school, and my first year in university. Both used completely different programming languages and tech stacks, so it&amp;rsquo;s an interesting place to look back at.&lt;/p&gt;
&lt;p&gt;I was running Windows on my personal machine, but the computers in the engineering department at my university were running Linux (SUSE if I recall correctly). It wasn&amp;rsquo;t my first exposure to Linux, but I was still more comfortable using Windows at this point.&lt;/p&gt;</description></item><item><title>Common async pitfalls—part two</title><link>/blog/common-async-pitfalls-part-two/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/common-async-pitfalls-part-two/</guid><description>&lt;p&gt;Following on from &lt;a href="/blog/common-async-pitfalls-part-one/"&gt;part one&lt;/a&gt;, here&amp;rsquo;s some more of the most common pitfalls I&amp;rsquo;ve come across—either myself, colleagues and friends, or examples in documentation—and how to avoid them.&lt;/p&gt;
&lt;h2 id="fake-sync-is-not-async"&gt;&amp;lsquo;Fake&amp;rsquo;-sync is not async&lt;/h2&gt;
&lt;p&gt;If the method you are calling is synchronous, even in an async method, then call it like any other synchronous method. If you want to yield the thread, then you should use &lt;code&gt;Task.Yield&lt;/code&gt; in most cases. For UI programming, see &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.yield"&gt;this note&lt;/a&gt; about &lt;code&gt;Task.Yield&lt;/code&gt; from the .NET API documentation.&lt;/p&gt;</description></item><item><title>Common async pitfalls—part one</title><link>/blog/common-async-pitfalls-part-one/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/common-async-pitfalls-part-one/</guid><description>&lt;p&gt;The .NET Framework provides a great programming model that enables high performance code using an easy to understand syntax. However, this can often give developers a false sense of security, and the language and runtime aren&amp;rsquo;t without pitfalls. Ideally static analysers, like the &lt;a href="https://www.nuget.org/packages/Microsoft.VisualStudio.Threading.Analyzers/"&gt;Microsoft.VisualStudio.Threading.Analyzers Roslyn analysers&lt;/a&gt;, would catch all these issues at build time. While they do help catch a lot of mistakes, they can&amp;rsquo;t catch everything, so it&amp;rsquo;s important to understand the problems and how to avoid them.&lt;/p&gt;</description></item><item><title>Zwift on Linux</title><link>/blog/zwift-on-linux/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/zwift-on-linux/</guid><description>&lt;p&gt;Getting Zwift to run on Linux was a journey I started &lt;a href="https://bugs.winehq.org/show_bug.cgi?id=46313"&gt;just over a year ago&lt;/a&gt;. I didn&amp;rsquo;t get very far with my effort, but since then a lot of progress has been made by the Wine developers and others in the community, and Zwift is now (mostly) playable on Linux. I&amp;rsquo;ll admit there are some workarounds required. Like having to use the &lt;a href="https://support.zwift.com/en_us/using-the-zwift-companion-app-Hybn8qzPr"&gt;Zwift companion app&lt;/a&gt; to connect sensors. But on the whole, it works well. So I wanted to summarise the process for anyone who wants to try it for themselves.&lt;/p&gt;</description></item><item><title>How to host your Helm chart repository on GitHub</title><link>/blog/how-to-host-your-helm-chart-repository-on-github/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/how-to-host-your-helm-chart-repository-on-github/</guid><description>&lt;p&gt;Since the release of Helm 3, the official &lt;a href="https://github.com/helm/charts"&gt;helm/charts&lt;/a&gt; repository has been deprecated in favour of &lt;a href="https://hub.helm.sh/"&gt;Helm Hub&lt;/a&gt;. While it&amp;rsquo;s great for decentralization and the long term sustainability of the project, I think there&amp;rsquo;s a lot more that is lost. Where is the best place to go for of the expert advice now? Installing Helm now requires you to manually add each repository you use. And there&amp;rsquo;s now some added friction to hosting your Helm charts.&lt;/p&gt;</description></item><item><title>7 tips for converting C# code to async/await</title><link>/blog/7-tips-for-converting-csharp-code-to-async-await/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>/blog/7-tips-for-converting-csharp-code-to-async-await/</guid><description>&lt;p&gt;Over the past year I&amp;rsquo;ve moved from working mainly in Java, to working mainly in C#. To be honest, Java and C# have more in common than not, but one of the major differences is async/await. It&amp;rsquo;s a really powerful tool if used correctly, but also a very quick way to shoot yourself in the foot.&lt;/p&gt;
&lt;p&gt;Asynchronous programming looks very similar to synchronous programming. However, there are some core concepts which need to be understood in order to form a proper mental model when converting between synchronous and asynchronous programming patterns.&lt;/p&gt;</description></item><item><title>Automated Dependency Updates</title><link>/blog/automated-dependency-updates/</link><pubDate>Wed, 23 Oct 2019 13:51:01 +0000</pubDate><guid>/blog/automated-dependency-updates/</guid><description>&lt;p&gt;At &lt;a href="https://copenhagenjs.dk"&gt;CopenhagenJS&lt;/a&gt; in August I was able to share my work on &lt;a href="https://renovatebot.com/"&gt;Renovate&lt;/a&gt;—a universal dependency update tool—and how you can use it to save time and improve security in software projects.&lt;/p&gt;
&lt;p&gt;If you want to find out more about Renovate you can find us &lt;a href="https://github.com/renovatebot/renovate"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;lite-youtube 
 videoid="yAntIlemF28" videotitle="Automated Dependency Updates with Renovate" videoplay="Play" posterquality="hqdefault" posterloading="lazy"&gt;
 &lt;a class="lite-youtube-fallback" href="https://www.youtube.com/watch?v=yAntIlemF28"&gt;
 Watch on YouTube: "Automated Dependency Updates with Renovate"
 &lt;/a&gt;
&lt;/lite-youtube&gt;</description></item><item><title>Access: Hack The Box writeup</title><link>/blog/access-htb-writeup/</link><pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate><guid>/blog/access-htb-writeup/</guid><description>&lt;p&gt;&lt;a href="https://www.hackthebox.eu/home/machines/profile/156"&gt;&lt;img src="/img/access-info.png" alt="Access info page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently I discovered &lt;a href="https://www.hackthebox.eu/home"&gt;Hack The Box&lt;/a&gt;, an online platform to hone your cyber security skills by practising on vulnerable VMs. The first box I solved is called &lt;a href="https://www.hackthebox.eu/home/machines/profile/156"&gt;Access&lt;/a&gt;. In this blog post I&amp;rsquo;ll walk through how I solved it. If you don&amp;rsquo;t want any spoilers, look away now!&lt;/p&gt;
&lt;h2 id="information-gathering"&gt;Information gathering&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with an &lt;code&gt;nmap&lt;/code&gt; scan to see what services are running on the box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#57606a"&gt;# nmap -n -v -Pn -p- -A --reason -oN nmap.txt 10.10.10.98&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 2&lt;/span&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 3&lt;/span&gt;&lt;span&gt;PORT STATE SERVICE REASON VERSION
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 4&lt;/span&gt;&lt;span&gt;21/tcp open ftp syn-ack Microsoft ftpd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 5&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt; ftp-anon: Anonymous FTP login allowed &lt;span style="color:#0550ae"&gt;(&lt;/span&gt;FTP code 230&lt;span style="color:#0550ae"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 6&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt;_Can&lt;span style="color:#f6f8fa;background-color:#82071e"&gt;&amp;#39;&lt;/span&gt;t get directory listing: TIMEOUT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 7&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt; ftp-syst:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 8&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt;_ SYST: Windows_NT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt; 9&lt;/span&gt;&lt;span&gt;23/tcp open telnet syn-ack Microsoft Windows XP telnetd &lt;span style="color:#0550ae"&gt;(&lt;/span&gt;no more connections allowed&lt;span style="color:#0550ae"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;10&lt;/span&gt;&lt;span&gt;80/tcp open http syn-ack Microsoft IIS httpd 7.5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;11&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt; http-methods:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;12&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt; Supported Methods: OPTIONS TRACE GET HEAD POST
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;13&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt;_ Potentially risky methods: TRACE
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;14&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt;_http-server-header: Microsoft-IIS/7.5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;15&lt;/span&gt;&lt;span&gt;&lt;span style="color:#1f2328"&gt;|&lt;/span&gt;_http-title: MegaCorp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nmap&lt;/code&gt; has found three services running: FTP, telnet, and an HTTP server. Let&amp;rsquo;s see what&amp;rsquo;s running on the HTTP server.&lt;/p&gt;</description></item><item><title>Twitter Hashflags (_Hash-what?_)</title><link>/blog/twitter-hashflags/</link><pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate><guid>/blog/twitter-hashflags/</guid><description>&lt;p&gt;Have you ever tweeted out a hastag, and discovered a small image attached to the side of it? It could be for &lt;a href="https://twitter.com/HashflagArchive/status/972005822388514818"&gt;#StPatricksDay&lt;/a&gt;, &lt;a href="https://twitter.com/HashflagArchive/status/972170656912723969"&gt;#MarchForOurLives&lt;/a&gt;, or whatever &lt;a href="https://twitter.com/HashflagArchive/status/960529700442566656"&gt;#白白白白白白白白白白&lt;/a&gt; is meant to be. These are hashflags.&lt;/p&gt;
&lt;p&gt;A hashflag, sometimes called Twitter emoji, is a small image that appears after a #hashtag for special events. They are not regular emoji, and you can only use them on the Twitter website, or the official Twitter apps.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re a company, and &lt;a href="http://www.adweek.com/digital/twitters-branded-emojis-come-million-dollar-commitment-169327/"&gt;you have enough money&lt;/a&gt;, you can buy your own hashflag as well! That&amp;rsquo;s exactly what Disney did for the release of Star Wars: The Last Jedi.&lt;/p&gt;</description></item><item><title>A survey of robots.txt - part two</title><link>/blog/a-survey-of-robots-txt-part-two/</link><pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate><guid>/blog/a-survey-of-robots-txt-part-two/</guid><description>&lt;p&gt;In &lt;a href="/posts/a-survey-of-robots-txt-part-one/"&gt;part one&lt;/a&gt; of this article, I collected &lt;code&gt;robots.txt&lt;/code&gt; from the top 1 million sites on the web. In this article I&amp;rsquo;m going to do some analysis, and see if there&amp;rsquo;s anything interesting to find from all the files I&amp;rsquo;ve collected.&lt;/p&gt;
&lt;p&gt;First we&amp;rsquo;ll start with some setup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style="color:#0550ae"&gt;%&lt;/span&gt;matplotlib inline
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;2&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;3&lt;/span&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;import&lt;/span&gt; &lt;span style="color:#24292e"&gt;pandas&lt;/span&gt; &lt;span style="color:#cf222e"&gt;as&lt;/span&gt; &lt;span style="color:#24292e"&gt;pd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;4&lt;/span&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;import&lt;/span&gt; &lt;span style="color:#24292e"&gt;numpy&lt;/span&gt; &lt;span style="color:#cf222e"&gt;as&lt;/span&gt; &lt;span style="color:#24292e"&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;5&lt;/span&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;import&lt;/span&gt; &lt;span style="color:#24292e"&gt;glob&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;6&lt;/span&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;import&lt;/span&gt; &lt;span style="color:#24292e"&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"&gt;7&lt;/span&gt;&lt;span&gt;&lt;span style="color:#cf222e"&gt;import&lt;/span&gt; &lt;span style="color:#24292e"&gt;matplotlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next I&amp;rsquo;m going to load the content of each file into my pandas dataframe, calculate the file size, and store that for later.&lt;/p&gt;</description></item><item><title>A survey of robots.txt - part one</title><link>/blog/a-survey-of-robots-txt-part-one/</link><pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate><guid>/blog/a-survey-of-robots-txt-part-one/</guid><description>&lt;p&gt;After reading &lt;a href="https://www.kaggle.com/colinmorris/unusual-favicons-a-brief-survey"&gt;CollinMorris&amp;rsquo;s analysis of favicons&lt;/a&gt; of the top 1 million sites on the web, I thought it would be interesting to do the same for other common parts of websites that often get overlooked.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;robots.txt&lt;/code&gt; file is a plain text file found at on most websites which communicates information to web crawlers and spiders about how to scan a website.. For example, here&amp;rsquo;s an excerpt from &lt;code&gt;robots.txt&lt;/code&gt; for &lt;code&gt;google.com&lt;/code&gt;&lt;/p&gt;</description></item><item><title>Setting up nginx reverse proxy with Let's Encrypt on unRAID</title><link>/blog/setting-up-nginx-reverse-proxy-with-lets-encrypt-on-unraid/</link><pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate><guid>/blog/setting-up-nginx-reverse-proxy-with-lets-encrypt-on-unraid/</guid><description>&lt;p&gt;Late last year I set about building a new NAS to replace my aging HP ProLiant MicroServer N36L (though that&amp;rsquo;s a story for a different post). I decided to go with unRAID as my OS, over FreeNAS that I&amp;rsquo;d been running previously, mostly due to the simpler configuration, ease of expanding an array, and support for Docker and KVM.&lt;/p&gt;
&lt;p&gt;Docker support makes it a lot easier to run some of the web apps that I rely on like Plex, Sonarr, CouchPotato and more, but accessing them securely outside my network is a different story. On FreeNAS I ran an nginx reverse proxy in a BSD jail, secured using basic auth, and SSL certificates from &lt;a href="https://www.startssl.com/"&gt;StartSSL&lt;/a&gt;. Thankfully there is already a Docker image, &lt;a href="https://hub.docker.com/r/jwilder/nginx-proxy/"&gt;nginx-proxy&lt;/a&gt; by jwilder, which automatically configures nginx for you. As for SSL, &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; went into public beta in December, and recently issued their millionth certificate. There&amp;rsquo;s also a Docker image which will automatically manage your certificates, and configure nginx for you - &lt;a href="https://hub.docker.com/r/jrcs/letsencrypt-nginx-proxy-companion/"&gt;letsencrypt-nginx-proxy-companion&lt;/a&gt; by jrcs.&lt;/p&gt;</description></item><item><title>Do you really want "bank grade" security in your SSL? Danish edition</title><link>/blog/do-you-want-bank-grade-ssl-danish-edition/</link><pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate><guid>/blog/do-you-want-bank-grade-ssl-danish-edition/</guid><description>&lt;p&gt;I recently saw an article on &lt;a href="https://www.reddit.com/r/programming"&gt;/r/programming&lt;/a&gt; called &lt;a href="https://www.troyhunt.com/do-you-really-want-bank-grade-security/"&gt;Do you really want &amp;ldquo;bank grade&amp;rdquo; security in your SSL? Here&amp;rsquo;s how Aussie banks fare&lt;/a&gt;. The author used the &lt;a href="https://www.ssllabs.com/ssltest/"&gt;Qualys SSL Labs test&lt;/a&gt; to determine how good Aussie banks&amp;rsquo; SSL implementations really are. I thought the article was great, and gave good, actionable feedback. At the time of writing this two of the banks listed have already improved their SSL scores.&lt;/p&gt;
&lt;p&gt;It got me thinking: how well (or badly) do banks in Denmark fare? We put our trust - and our money - in these banks, but do they really deserve it? The banks I&amp;rsquo;ll be testing come from the &lt;a href="https://en.wikipedia.org/wiki/List_of_systemically_important_banks"&gt;list of systemically important banks&lt;/a&gt;, more commonly known as &amp;ldquo;Too big to fail.&amp;rdquo; The list consists of:&lt;/p&gt;</description></item><item><title>Continuously deploy Jekyll to Azure Web Apps</title><link>/blog/continuous-deployment-jekyll-to-azure/</link><pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate><guid>/blog/continuous-deployment-jekyll-to-azure/</guid><description>&lt;p&gt;I&amp;rsquo;ve been thinking about writing a blog for a while now, but there are just so many blogging platforms out there to choose from. I finally settled on Jekyll as it&amp;rsquo;s really lightweight (compared to platforms like Wordpress), it has an active development community, and you can write all your articles in Markdown.&lt;/p&gt;
&lt;p&gt;Many Jekyll users host their Jekyll sites through GitHub Pages, and there are a lot of advantages to this:&lt;/p&gt;</description></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>&lt;p&gt;I&amp;rsquo;m a principal software engineer at Microsoft focusing on open source software and supply chain security. You can find me hanging out in the OpenSSF or working on Renovate in my spare time.&lt;/p&gt;
&lt;p&gt;This site is my online home for all things code, or otherwise&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;hellip;but mainly code.&lt;/p&gt;</description></item></channel></rss>